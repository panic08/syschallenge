plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.4'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'org.flywaydb.flyway' version '9.22.3'
    id 'nu.studer.jooq' version '9.0'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    jjwtVersion = '0.12.6'
    springDocVersion = '2.6.0'
    mapstructVersion = '1.5.5.Final'
    micrometerVersion = '1.13.6'
    amazonAwsSdkVersion = '2.30.30'
    thumbnailator = '0.4.20'
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation "org.springdoc:springdoc-openapi-starter-webmvc-api:${springDocVersion}"
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springDocVersion}"
    implementation "io.micrometer:micrometer-registry-prometheus:${micrometerVersion}"
    implementation "software.amazon.awssdk:s3:${amazonAwsSdkVersion}"
    implementation "net.coobird:thumbnailator:${thumbnailator}"
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-database-postgresql'
    implementation "io.jsonwebtoken:jjwt-api:${jjwtVersion}"
    runtimeOnly "io.jsonwebtoken:jjwt-impl:${jjwtVersion}"
    runtimeOnly "io.jsonwebtoken:jjwt-jackson:${jjwtVersion}"
    compileOnly 'org.projectlombok:lombok'
    jooqGenerator 'org.postgresql:postgresql'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}


def getConfigProperty(String key, String defaultValue) {
    def value = System.getenv(key)
    if (value != null) return value

    value = System.getProperty(key)
    if (value != null) return value

    value = project.hasProperty(key) ? project.property(key) : null
    if (value != null) return value

    return defaultValue
}

flyway {
    url = getConfigProperty('SPRING_FLYWAY_URL', '')
    user = getConfigProperty('SPRING_FLYWAY_USER', '')
    password = getConfigProperty('SPRING_FLYWAY_PASSWORD', '')
    locations = getConfigProperty('SPRING_FLYWAY_LOCATIONS', '').split(',')
}
jooq {
    configurations {
        main {
            generateSchemaSourceOnCompilation = false
            generationTool {
                jdbc {
                    driver = 'org.postgresql.Driver'
                    url = getConfigProperty('SPRING_DATASOURCE_URL', '')
                    user = getConfigProperty('SPRING_DATASOURCE_USERNAME', '')
                    password = getConfigProperty('SPRING_DATASOURCE_PASSWORD', '')
                }

                generator {
                    target {
                        packageName = 'com.syschallenge'
                        directory = 'build/generated-src/jooq/main'
                    }
                    strategy.name = 'org.jooq.codegen.DefaultGeneratorStrategy'
                }
            }
        }
    }
}

tasks.named('test') {
    useJUnitPlatform()
}


